name: Deploy to Staging

on:
  push:
    branches: [ develop, staging ]
  workflow_dispatch:

env:
  NODE_VERSION: '18.x'
  PROJECT_NAME: 'anshika-caters-staging'

jobs:
  deploy-staging:
    name: Deploy to Staging Environment
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install Dependencies
      run: npm ci

    - name: Build Application
      run: npm run build
      env:
        NODE_ENV: staging

    - name: Setup SSH Agent
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.VPS_SSH_KEY }}

    - name: Add VPS to Known Hosts
      run: |
        mkdir -p ~/.ssh
        ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts

    - name: Deploy to Staging
      run: |
        # Create deployment archive
        tar -czf staging-deployment.tar.gz \
          --exclude='.git' \
          --exclude='node_modules' \
          --exclude='.github' \
          .

        # Upload and deploy to staging directory
        scp staging-deployment.tar.gz ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:/tmp/

        ssh ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "
          cd /var/www &&
          rm -rf ${{ env.PROJECT_NAME }}_temp &&
          mkdir -p ${{ env.PROJECT_NAME }}_temp &&
          cd ${{ env.PROJECT_NAME }}_temp &&
          tar -xzf /tmp/staging-deployment.tar.gz &&
          npm ci --production &&
          
          # Atomic swap
          cd /var/www &&
          rm -rf ${{ env.PROJECT_NAME }}_old &&
          if [ -d '${{ env.PROJECT_NAME }}' ]; then
            mv ${{ env.PROJECT_NAME }} ${{ env.PROJECT_NAME }}_old
          fi &&
          mv ${{ env.PROJECT_NAME }}_temp ${{ env.PROJECT_NAME }} &&
          
          # Set permissions
          chown -R www-data:www-data ${{ env.PROJECT_NAME }} &&
          chmod -R 755 ${{ env.PROJECT_NAME }} &&
          
          # Restart staging PM2 process
          if command -v pm2 &> /dev/null; then
            pm2 restart ${{ env.PROJECT_NAME }} || pm2 start ecosystem.config.json --name ${{ env.PROJECT_NAME }} --env staging
          fi &&
          
          rm -f /tmp/staging-deployment.tar.gz
        "

    - name: Staging Health Check
      run: |
        sleep 10
        echo "ðŸ§ª Staging deployment completed"
        echo "ðŸ“… Deployed at: $(date)"
        echo "ðŸ“¦ Commit: ${{ github.sha }}"
