name: Deploy to Hostinger VPS

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
    types: [ closed ]

env:
  NODE_VERSION: '22.17.1'
  PROJECT_NAME: 'anshika-caters'

jobs:
  # Test and Build Job
  test-and-build:
    name: Test and Build
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: latest

    - name: Install Dependencies
      run: bun install --frozen-lockfile

    - name: Generate package-lock.json for npm fallback
      run: npm install --package-lock-only

    - name: Build Application
      run: bun run build
      env:
        CI: true
        NODE_ENV: production

  # Deploy Job (only runs if tests pass)
  deploy:
    name: Deploy to VPS using deploy.sh
    needs: test-and-build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup SSH Agent
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.VPS_SSH_KEY }}

    - name: Add VPS to Known Hosts
      run: |
        mkdir -p ~/.ssh
        ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts

    - name: Create Deployment Archive
      run: |
        echo "Creating deployment archive..."
        tar --warning=no-file-changed -czf project.tar.gz \
          --exclude='.git' \
          --exclude='node_modules' \
          --exclude='.github' \
          --exclude='*.log' \
          --exclude='.env*' \
          --exclude='project.tar.gz' \
          . || [ $? -eq 1 ]
        
        echo "Archive created:"
        ls -lh project.tar.gz

    - name: Upload and Deploy using deploy.sh
      run: |
        # Upload the project archive
        scp project.tar.gz ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:/tmp/

        # Extract and run deploy script on VPS
        ssh ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "
          # Create temporary deployment directory
          rm -rf /tmp/anshika-caters-deploy
          mkdir -p /tmp/anshika-caters-deploy
          cd /tmp/anshika-caters-deploy
          
          # Extract project
          tar -xzf /tmp/project.tar.gz
          
          # Make deploy script executable
          chmod +x deploy.sh
          
          # Add Bun to PATH if it exists
          export PATH=\"/root/.bun/bin:\$PATH\"
          
          # Install Bun if not available
          if ! command -v bun &> /dev/null; then
            echo 'Installing Bun...'
            curl -fsSL https://bun.sh/install | bash
            source ~/.bashrc
            export PATH=\"/root/.bun/bin:\$PATH\"
          fi
          
          # Run the deployment script
          echo 'Running deployment script...'
          ./deploy.sh production
          
          # Clean up
          rm -f /tmp/project.tar.gz
          rm -rf /tmp/anshika-caters-deploy
        "

    - name: Health Check
      run: |
        # Wait for services to start
        sleep 15
        
        # Check if the application is responding
        if curl -f -s --max-time 30 https://acaterers.com/api/health > /dev/null; then
          echo "✅ Deployment successful - Health check passed"
        else
          echo "❌ Health check failed - Manual verification needed"
          echo "Please check https://acaterers.com/api/health manually"
          # Don't fail the deployment for health check issues
        fi

    - name: Notify Success
      if: success()
      run: |
        echo "🚀 Deployment completed successfully using deploy.sh!"
        echo "📅 Deployed at: $(date)"
        echo "📦 Commit: ${{ github.sha }}"
        echo "🔗 Website: https://acaterers.com"

    - name: Rollback on Failure
      if: failure()
      run: |
        echo "❌ Deployment failed, attempting to restart existing PM2 process..."
        ssh ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "
          export PATH=\"/root/.bun/bin:\$PATH\"
          if command -v pm2 &> /dev/null; then
            pm2 restart anshika-caters || echo 'PM2 restart failed'
            pm2 list
          fi
        "
